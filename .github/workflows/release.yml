name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: true
        type: string

jobs:
  # 如果是 workflow_dispatch，先创建并推送 tag
  create-tag:
    name: Create and Push Tag
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    outputs:
      tag: ${{ steps.create_tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag
        id: create_tag
        run: |
          TAG="${{ github.event.inputs.version }}"
          echo "Creating tag: ${TAG}"
          git tag -a "${TAG}" -m "Release ${TAG}"
          git push origin "${TAG}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [create-tag]
    if: always() && !cancelled() && !failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag.outputs.tag || github.ref }}

      - name: Setup Go with cache
        uses: ./.github/actions/setup-go
        with:
          go-version: "1.21"

      - name: Run tests
        run: go test -v ./...

      - name: Run go vet
        run: go vet ./...

  build:
    name: Build Binary
    runs-on: ubuntu-latest
    needs: [create-tag, test]
    if: always() && !cancelled() && needs.test.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag.outputs.tag || github.ref }}

      - name: Setup Go with cache
        uses: ./.github/actions/setup-go
        with:
          go-version: "1.21"

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build
        run: go build -v -ldflags "-X main.Version=${{ steps.version.outputs.version }}" -o bin/feishu-github-tracker ./cmd/feishu-github-tracker

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: feishu-github-tracker-binary-${{ steps.version.outputs.version }}
          path: bin/feishu-github-tracker
          retention-days: 30

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [create-tag, test]
    if: always() && !cancelled() && needs.test.result == 'success'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag.outputs.tag || github.ref }}

      - name: Get version and tags
        id: meta
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi

          # 移除 'v' 前缀（如果有）用于 Docker tag
          DOCKER_VERSION="${VERSION#v}"

          # 构建 Docker 标签
          TAGS="ghcr.io/${{ github.repository }}:${DOCKER_VERSION}"
          TAGS="${TAGS},ghcr.io/${{ github.repository }}:latest"

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "docker_version=${DOCKER_VERSION}" >> $GITHUB_OUTPUT
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          provenance: false
          sbom: false
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [create-tag, build, docker]
    if: always() && !cancelled() && needs.build.result == 'success' && needs.docker.result == 'success'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag.outputs.tag || github.ref }}
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: feishu-github-tracker-binary-${{ steps.version.outputs.version }}
          path: ./release

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "## Release ${VERSION}" > release_notes.md
          echo "" >> release_notes.md
          echo "### Docker Image" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "docker pull ghcr.io/${{ github.repository }}:${VERSION#v}" >> release_notes.md
          echo "docker pull ghcr.io/${{ github.repository }}:latest" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "### Changes" >> release_notes.md

          # 获取上一个 tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "${PREV_TAG}" ]; then
            echo "" >> release_notes.md
            git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" >> release_notes.md
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            release/feishu-github-tracker
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
